<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="audio__buffer_8cc" kind="file" language="C++">
    <compoundname>audio_buffer.cc</compoundname>
    <includes refid="audio__buffer_8h" local="yes">rtff/buffer/audio_buffer.h</includes>
    <incdepgraph>
      <node id="25">
        <label>cstdint</label>
      </node>
      <node id="26">
        <label>vector</label>
      </node>
      <node id="24">
        <label>rtff/buffer/audio_buffer.h</label>
        <link refid="audio__buffer_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/code/src/rtff/buffer/audio_buffer.cc</label>
        <link refid="audio__buffer_8cc"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacertff">rtff</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;rtff/buffer/audio_buffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacertff" kindref="compound">rtff</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classrtff_1_1AudioBuffer_1aedaa446ef6d948aac09c874f3d93d88e" kindref="member">AudioBuffer::AudioBuffer</ref>(uint32_t<sp/>frame_count,<sp/>uint8_t<sp/>channel_count)<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>channel_idx<sp/>=<sp/>0;<sp/>channel_idx<sp/>&lt;<sp/><ref refid="classrtff_1_1AudioBuffer_1a5b1defafc1a1d409f5ccab5f29bc09fd" kindref="member">channel_count</ref>;<sp/>channel_idx++)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>data_.push_back(std::vector&lt;float&gt;(frame_count));</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrtff_1_1AudioBuffer_1aaca4637f12fc2ec6885837771b73eb0d" kindref="member">AudioBuffer::fromInterleaved</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="classrtff_1_1AudioBuffer_1a616c030e6ed4ee6765d1b5461d725e75" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>channel_idx<sp/>=<sp/>0;<sp/>channel_idx<sp/>&lt;<sp/><ref refid="classrtff_1_1AudioBuffer_1a5b1defafc1a1d409f5ccab5f29bc09fd" kindref="member">channel_count</ref>();<sp/>channel_idx++)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>channel<sp/>=<sp/>data_[channel_idx];</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>frame_idx<sp/>=<sp/>0;<sp/>frame_idx<sp/>&lt;<sp/><ref refid="classrtff_1_1AudioBuffer_1a1cfbb4fb851ec5ec123cd89fc4c6a23d" kindref="member">frame_count</ref>();<sp/>frame_idx++)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>channel[frame_idx]<sp/>=<sp/>data[(frame_idx<sp/>*<sp/><ref refid="classrtff_1_1AudioBuffer_1a5b1defafc1a1d409f5ccab5f29bc09fd" kindref="member">channel_count</ref>())<sp/>+<sp/>channel_idx];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classrtff_1_1AudioBuffer_1a8b99bfbebbc2c014070dd8c84a74369f" kindref="member">AudioBuffer::toInterleaved</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>channel_idx<sp/>=<sp/>0;<sp/>channel_idx<sp/>&lt;<sp/><ref refid="classrtff_1_1AudioBuffer_1a5b1defafc1a1d409f5ccab5f29bc09fd" kindref="member">channel_count</ref>();<sp/>channel_idx++)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>channel<sp/>=<sp/>data_[channel_idx];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>frame_idx<sp/>=<sp/>0;<sp/>frame_idx<sp/>&lt;<sp/><ref refid="classrtff_1_1AudioBuffer_1a1cfbb4fb851ec5ec123cd89fc4c6a23d" kindref="member">frame_count</ref>();<sp/>frame_idx++)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[(frame_idx<sp/>*<sp/><ref refid="classrtff_1_1AudioBuffer_1a5b1defafc1a1d409f5ccab5f29bc09fd" kindref="member">channel_count</ref>())<sp/>+<sp/>channel_idx]<sp/>=<sp/>channel[frame_idx];</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="classrtff_1_1AudioBuffer_1a616c030e6ed4ee6765d1b5461d725e75" kindref="member">AudioBuffer::data</ref>(uint8_t<sp/>channel_idx)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[channel_idx].data();</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="classrtff_1_1AudioBuffer_1a616c030e6ed4ee6765d1b5461d725e75" kindref="member">AudioBuffer::data</ref>(uint8_t<sp/>channel_idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[channel_idx].data();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">uint32_t<sp/><ref refid="classrtff_1_1AudioBuffer_1a1cfbb4fb851ec5ec123cd89fc4c6a23d" kindref="member">AudioBuffer::frame_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data_.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[0].size();</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">uint8_t<sp/><ref refid="classrtff_1_1AudioBuffer_1a5b1defafc1a1d409f5ccab5f29bc09fd" kindref="member">AudioBuffer::channel_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_.size();<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>rtff</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/code/src/rtff/buffer/audio_buffer.cc"/>
  </compounddef>
</doxygen>
